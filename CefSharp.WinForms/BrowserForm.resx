<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AHIAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuwAAAFMAAABUAAAAVAAAAFQAAABUAAAAVAAA
        AFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVAAAAFQAAABUAAAAVQAAADYAAAABAAAAAAAA
        AAAAAAAAAAAAGgAAAMkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAA+wAAAPsAAAD7AAAA+wAA
        APsAAAD7AAAA+wAAAPsAAAD7AAAA+wAAAPsAAAD7AAAA+wAAAPsAAAD7AAAA+wAAAPsAAAD/AAAAqgAA
        AAUAAAAAAAAAAAAAAAAAAAAAAAAAXgAAAPUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAACvAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAIAAAApgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAA
        APYAAAD2AAAA9gAAAPYAAAD2AAAA9gAAAPYAAAD2AAAA9gAAAPYAAAD2AAAA+gAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAKEAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtAAAA2wAAAP8AAAD/AAAA/wAA
        AP8AAAC0AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAADwAAACTAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEwAAABgAAABcAAAA9QAA
        AP8AAAD/AAAA/wAAAMAAAAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AJkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPcAAABKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAAAhQAA
        ACMAAACQAAAA/wAAAP8AAAD/AAAA9QAAAE0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAsAAAA4wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3wAAAB8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAACTAAAAsAAAADEAAACwAAAA/wAAAP8AAAD/AAAAxAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEwAAAKcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACfAAAABQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAC8AAADkAAAAuQAAAE8AAADCAAAA/wAAAP8AAAD/AAAAwgAAAD0AAAAHAAAAAAAA
        AAAAAAAAAAAABAAAAC0AAACrAAAA/AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAAAEkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAH8AAAD+AAAAzgAAAHgAAADPAAAA/wAAAP8AAAD/AAAA7AAA
        AK8AAABrAAAATwAAAGMAAAChAAAA5QAAAP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsAAAC4AAAAUwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAAALQAAAD/AAAA6wAAALgAAADoAAAA/wAA
        AP8AAAD/AAAA/wAAAP4AAAD6AAAA/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAtgAA
        ACoAAACGAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJwAAAMAAAAD/AAAA/QAA
        APgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AMQAAAAoAAAAAwAAAIoAAAAnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAA
        ALEAAAD8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        APsAAACzAAAAJwAAAAAAAAAAAAAAegAAAEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEgAAAHgAAADdAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP0AAADcAAAAeAAAABEAAAAAAAAAAAAAAAAAAACTAAAAVgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACoAAACFAAAAxgAAAPMAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA1wAAAD4AAAABAAAAAAAAAAAAAAAAAAAALQAAAMkAAAA8AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAQAAAAGYAAABsAAAAcgAA
        AJgAAADmAAAA/QAAAP8AAAD6AAAAygAAAJQAAABsAAAAWQAAAHwAAADTAAAAvwAAABAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAABQAAACsAAABsAAAAvgAAAOMAAAD3AAAA/wAAAP8AAAD+AAAA9AAAAL0AAAAxAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAIQAAAEIAAABmAAAAewAAAGsAAAA6AAAADwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////8A8B/+AAAH/gAAAf4+AAD8OAAAPDgAAD4QAAAeAAAADgAHwA4AD
        +AHAB/wBwAf//+AAAADgAAAA8AAAAPAAAAD4AAAB8Af8AfAH/AHwA/gB+ADgA/gAAAP8AAAB/gAAAf8A
        ABn/gAAx/8AAcf/wAAH//8AD///4B/////8=
</value>
  </data>
</root>